<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-06-27T12:48:04-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Engineer Edgar</title><subtitle>I break, make, and fix stuff... Usually in that order. </subtitle><entry><title type="html">Building a Roguelike in JavaScript 2019 - part 1</title><link href="http://localhost:4000/building-a-roguelike-in-js-part1/" rel="alternate" type="text/html" title="Building a Roguelike in JavaScript 2019 - part 1" /><published>2019-06-25T13:37:00-04:00</published><updated>2019-06-25T13:37:00-04:00</updated><id>http://localhost:4000/building-a-roguelike-in-js-part1</id><content type="html" xml:base="http://localhost:4000/building-a-roguelike-in-js-part1/">&lt;h1 id=&quot;hello-rogue&quot;&gt;Hello, Rogue&lt;/h1&gt;

&lt;p&gt;Nearly every introduction to a programming language or framework has a ‘Hello World’ application as its first step. This is to ensure that you have properly configured your development environment. Therefore this section will aim to guide you to print out your own ‘Hello, World’ message on screen.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;In this part of the Roguelike in JavaScript series we will be reviewing the following topics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#live_server&quot;&gt;Deployment with Live Server&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Shows how to serve index.html so we can make live edits to our application without the need of renting a server.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#hello_rogue&quot;&gt;Hello, Rogue - Printing to Display&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;The goal of this part is to simply display ‘Hello, World’ in a rot.js container on our screen.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#importing_destructuring&quot;&gt;Imports and Destructuring&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Talks about ES6 importing modules and destructuring them.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#options&quot;&gt;Let their be options&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Discusses scopes of variables&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#classes&quot;&gt;Constructing a new Display&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Refers to ES6 Classes, and the DOM&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#loops&quot;&gt;Looping and Printing in Color&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;Teaches how to loop and print values in rot.js&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#results&quot;&gt;Results&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#full_code&quot;&gt;Full Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have yet to setup your development environment, I suggest reading the &lt;a href=&quot;http://localhost:4000/building-a-roguelike-in-js-part0/#how-to-follow-this-series&quot; target=&quot;_blank&quot;&gt;previous part of this series&lt;/a&gt; where I discuss how to setup VSCode and how to get the rot.js library.&lt;/p&gt;

&lt;h1 id=&quot;live_server&quot;&gt;Getting Started - Serving up some HTML&lt;/h1&gt;

&lt;p&gt;The first step will involve us with setting up Live Server, and properly serving our &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file, after this we will start working on our &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/main.js&lt;/code&gt; file which will be where we execute all our main JavaScript functions.&lt;/p&gt;

&lt;p&gt;To get started open up VSCode and create a new file called &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; in the root folder of your project.  Inside our index.html will be the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;jsroguelike - 2019&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;JavaScript Roguelike&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;module&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;assets/main.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we are simply just setting up our template HTML. If you don’t know HTML, then I highly recommend you &lt;a href=&quot;https://www.w3schools.com/html/default.asp&quot; target=&quot;_blank&quot;&gt;learn it&lt;/a&gt;, however knowing HTML is absolutely unnecessary for this series. The most important part of this, in fact the only part that matters is the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; tag. This is where we are loading our &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;In order for us to see what’s going on, we need to load up a local server and serve our &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;. In this case we’ll be using the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot; target=&quot;_blank&quot;&gt;Live Server&lt;/a&gt; extension provided by &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot;&gt;VSCode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To start Live Server simply right click on our &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; in VSCode, and click &lt;strong&gt;Open with Live Server&lt;/strong&gt;. After that navigate to your web browser and enter the URL &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:5500&lt;/code&gt;. This is the default location Live Server starts up. You should see a JavaScript Roguelike header appear. However we have yet to make the &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/main.js&lt;/code&gt; file so if we look at our console in our browser we will see an error &lt;code class=&quot;highlighter-rouge&quot;&gt;failed to load resource assets/main.js&lt;/code&gt;. For Chrome users you can use the shortcut &lt;strong&gt;Control+Shift+I&lt;/strong&gt; to pull up the console to see this message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/roguelikedev/running-live-server.gif&quot; alt=&quot;Serving our index.html with live server&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;hello_rogue&quot;&gt;Hello, Rogue - Printing to the display&lt;/h1&gt;

&lt;p&gt;In this section we will finally start writing in JavaScript. To start make a folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;assets&lt;/code&gt; and inside that folder a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt;. The point of creating an assets folder is to structure our code and organize it better, you can name the folder anything you want, however for the purpose of this tutorial we will be naming the folder assets.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/main.js&lt;/code&gt; we will start off by importing rot.js library. &lt;em&gt;_For this to work you must have followed the previous guide’s section about &lt;a href=&quot;/building-a-roguelike-in-js-part0/#how-to-follow-this-series&quot; target=&quot;_blank&quot;&gt;obtaining the lib folder in our project&lt;/a&gt;._&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will start off by simply importing the rot.js library to our project. This gives us all the functionality rot.js has to offer. Furthermore we destructure Color, and Display from the rot.js namespace so we can simply type less, and for our code to be more readable.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import {Color, Display} from '../lib/index.js'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;importing_destructuring&quot;&gt;Importing and Destructuring (Optional Read)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot; target=&quot;_blank&quot;&gt;Import&lt;/a&gt; is the way of JavaScript to include other modules exported from libraries into our file. In this case we are importing the rot.js library into our file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot; target=&quot;_blank&quot;&gt;Destructuring&lt;/a&gt; is an easy way of unpacking values from an object. In this case we destructure &lt;code class=&quot;highlighter-rouge&quot;&gt;Color&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Display&lt;/code&gt; from the rot.js library. Without this, everytime we need to call upon either the Color or Display object, we would need to write: &lt;code class=&quot;highlighter-rouge&quot;&gt;ROT.Color()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ROT.Display()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;These are two ES6 features that make our lives slightly easier, and we’ll occasionally use them throughout the series, so understanding what it means will be helpful.&lt;/p&gt;

&lt;h2 id=&quot;options&quot;&gt;Let their be options&lt;/h2&gt;

&lt;p&gt;The next line of code in &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/main.js&lt;/code&gt; will be an optional object we will create to pass into our Display &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor&quot; target=&quot;_blank&quot;&gt;constructor&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let options = { 
	width: 80,
	height: 24
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; is a huge improvement from the previous &lt;a href=&quot;http://www.codingcookies.com/2013/04/01/building-a-roguelike-in-javascript-part-1/&quot; target=&quot;_blank&quot;&gt;tutorial&lt;/a&gt;.  &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let&quot; target=&quot;_blank&quot;&gt;Let&lt;/a&gt; declares a block scope local variable, opposed to the previous way of creating variables in JavaScript: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var&quot; target=&quot;_blank&quot;&gt;var&lt;/a&gt; which declares variables in the global scope.&lt;/p&gt;

&lt;p&gt;Previously if we defined our &lt;strong&gt;options&lt;/strong&gt; variable with &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;, and we decided to make another &lt;strong&gt;options&lt;/strong&gt; variable in another file, their would be a conflict between those variables, and it’s possible that an entirely different file can affect our current options object. In general, using global scope variables is a bad idea and should be avoided as much as possible. With the introduction of &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; we can limit the scope of our variable to whatever block of code it is in, in this case, it is only limited to the &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/main.js&lt;/code&gt; file and no other file in our project, which is what we want.&lt;/p&gt;

&lt;h2 id=&quot;classes&quot;&gt;Constructing a new Display&lt;/h2&gt;

&lt;p&gt;We will finally initialize our &lt;code class=&quot;highlighter-rouge&quot;&gt;Display&lt;/code&gt; class. This is where the meat of our application will reside in. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Display&lt;/code&gt; class will be used to print to the screen.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/main.js&lt;/code&gt; our next line of code is simple:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let display = new Display(options);
document.body.append(display.getContainer());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;rot.js provides us with a canvas-based output that is suppose to resemble traditional TTY terminal. This output is our &lt;code class=&quot;highlighter-rouge&quot;&gt;display&lt;/code&gt; class. The first line &lt;code class=&quot;highlighter-rouge&quot;&gt;let display = new Display(...);&lt;/code&gt; initializes a class called &lt;code class=&quot;highlighter-rouge&quot;&gt;display&lt;/code&gt;, by passing in the &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; object we created to the constructor of rot.js’s Display class… wow that was a mouthful. Essentially what we did was initialize a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot; target=&quot;_blank&quot;&gt;JavaScript class&lt;/a&gt;, a class is simply a paradigm of &lt;a href=&quot;https://www.webopedia.com/TERM/O/object_oriented_programming_OOP.html&quot; target=&quot;_blank&quot;&gt;Object-Oriented Programming&lt;/a&gt; that allows us to structure our data into a more coherent object that can perform actions and retain values. In essence, it’s a collection of objects, functions, and variables.&lt;/p&gt;

&lt;p&gt;rot.js provides a &lt;a href=&quot;https://ondras.github.io/rot.js/manual/#display&quot; target=&quot;_blank&quot;&gt;Display class&lt;/a&gt; that can take in an object that specifies options. These options are passed in through a constructor. A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor&quot; target=&quot;_blank&quot;&gt;constructor&lt;/a&gt; basically is called when you first create a class with the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;The next line has to do with the Document Object Model, or DOM for short. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction&quot; target=&quot;_blank&quot;&gt;The DOM is the programming interface for HTML documents&lt;/a&gt;. The DOM has to do with how your HTML document is formatted and displayed. &lt;code class=&quot;highlighter-rouge&quot;&gt;document.body.append(display.getContainer())&lt;/code&gt; is simply calling the class method &lt;code class=&quot;highlighter-rouge&quot;&gt;display.getContainer()&lt;/code&gt; which returns a DOM node of the display element. This element is then appended to the body of our &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;. This is how we can display our application. If we did not append the container to the body of our &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; then our Roguelike game will &lt;strong&gt;never&lt;/strong&gt; display.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;_Note since we destructure we do not have to write &lt;code class=&quot;highlighter-rouge&quot;&gt;let display = new ROT.Display(...);&lt;/code&gt; instead we simply write &lt;code class=&quot;highlighter-rouge&quot;&gt;let display = new Display(...);&lt;/code&gt;_&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;loops&quot;&gt;Looping and Printing in Color&lt;/h2&gt;

&lt;p&gt;Below appending our display value into the DOM, we will now finally print our message to the screen. How exciting, 6 minutes into this article and we finally get to the part that matters. 😳&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let foreground, background, colors, x;
for (let i = 0; i &amp;lt; 15; i++) {
  x = i * 20;
  foreground = Color.toRGB([255 - x, 255 - x, 255 - x]);
  background = Color.toRGB([x, x, x]);
  colors = &quot;%c{&quot; + foreground + &quot;}%b{&quot; + background + &quot;}&quot;;
  display.drawText(2, i, colors + &quot;Hello, Rogue!&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First we start off by initializing the &lt;code class=&quot;highlighter-rouge&quot;&gt;foreground&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;background&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;colors&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; value. Currently if you tried accessing these values immediately after the first line, you’ll get a not defined value, this is because we haven’t assigned the value to anything yet, we simply initialized it. The reason behind this is because we do not want to continuously initialize the values within the loop, each time the loop is called if we had an initialization statement within the loop, we’ll constantly be re-initializing the code, which is a waste of memory.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.w3schools.com/js/js_loop_for.asp&quot; target=&quot;_blank&quot;&gt;for loop&lt;/a&gt; simply just loops everything inside the curly braces 15 times.&lt;/p&gt;

&lt;p&gt;The following lines where we set &lt;code class=&quot;highlighter-rouge&quot;&gt;foreground&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;background&lt;/code&gt; involves RGB calculations which revolve around a Red Green Blue color system. The idea is the foreground will start light, with RGB values of 255,255,255, and the background starts off dark, with a RGB value of 0,0,0. As the program loops over, the values slowly decrease for the foreground, meaning it gets darker over each iteration, while the inverse is true for the background, it gets lighter over each iteration.&lt;/p&gt;

&lt;p&gt;Next we set these values to a &lt;code class=&quot;highlighter-rouge&quot;&gt;colors&lt;/code&gt; string, which colors our text according to the specified foreground and background.&lt;/p&gt;

&lt;p&gt;Finally, and the most important aspect of our code, we finally use &lt;code class=&quot;highlighter-rouge&quot;&gt;display.drawText()&lt;/code&gt; to write to the screen. This function should be fairly self-explanatory, it draws text to the display, in this case, we are drawing the string ‘Hello, Rogue’ with varying colors to the display.&lt;/p&gt;

&lt;h1 id=&quot;results&quot;&gt;Results&lt;/h1&gt;

&lt;p&gt;And finally, visiting the browser we can see our ‘Hello, World’ being displayed. (Note yours should say ‘Hello, Rogue’)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/roguelikedev/part-1-hello-rogue.png&quot; alt=&quot;Making your own Roguelike in JavaScript - Part 1&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;full_code&quot;&gt;Full Code&lt;/h1&gt;

&lt;h4 id=&quot;indexhtml&quot;&gt;index.html&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;jsroguelike - 2019&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;JavaScript Roguelike&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;module&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;assets/main.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;assetsmainjs&quot;&gt;assets/main.js&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Color, Display } from &quot;../lib/index.js&quot;;

let options = {
  width: 80,
  height: 20
};

let display = new Display(options);
document.body.append(display.getContainer());

let foreground, background, colors, x;
for (let i = 0; i &amp;lt; 15; i++) {
  x = i * 20;
  foreground = Color.toRGB([255 - x, 255 - x, 255 - x]);

  background = Color.toRGB([x, x, x]);

  colors = &quot;%c{&quot; + foreground + &quot;}%b{&quot; + background + &quot;}&quot;;

  display.drawText(2, i, colors + &quot;Hello, Rogue!&quot;);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>edgarmontano</name></author><category term="javascript" /><category term="roguelike" /><category term="rot.js" /><category term="programming" /><category term="featured" /><summary type="html">Hello, Rogue</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/blog/roguelikedev/roguelikedev.png" /></entry><entry><title type="html">Building a Roguelike in Javascript 2019 - part 0</title><link href="http://localhost:4000/building-a-roguelike-in-js-part0/" rel="alternate" type="text/html" title="Building a Roguelike in Javascript 2019 - part 0" /><published>2019-06-15T13:37:00-04:00</published><updated>2019-06-15T13:37:00-04:00</updated><id>http://localhost:4000/building-a-roguelike-in-js-part0</id><content type="html" xml:base="http://localhost:4000/building-a-roguelike-in-js-part0/">&lt;h2 id=&quot;what-is-a-roguelike&quot;&gt;What is a Roguelike?&lt;/h2&gt;

&lt;p&gt;Before we start this article I would like to clarify what a Roguelike is for those who do not know.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Roguelike is a subgenre of role-playing video game characterized by a dungeon crawl through procedurally generated levels, turn-based gameplay, tile-based graphics, and permanent death of the player character. Most roguelikes are based on a high fantasy narrative, reflecting their influence from tabletop role playing games such as Dungeons &amp;amp; Dragons.&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Roguelike&quot; target=&quot;_blank&quot;&gt;Roguelike - Wikipedia &lt;/a&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;center&gt;
&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/1/17/Rogue_Screen_Shot_CAR.PNG&quot; alt=&quot;Rogue - The original Roguelike&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;This definition is often described as the “Berlin Interpretation.” Some notable classic Roguelikes include &lt;a href=&quot;https://www.nethack.org/&quot; target=&quot;_blank&quot;&gt;NetHack&lt;/a&gt;, &lt;a href=&quot;https://www.adom.de/home/index.html&quot; target=&quot;_blank&quot;&gt;ADOM&lt;/a&gt;, &lt;a href=&quot;https://rephial.org/&quot; target=&quot;_blank&quot;&gt;Angband&lt;/a&gt;
, &lt;a href=&quot;https://te4.org&quot; target=&quot;_blank&quot;&gt;Tales of Maj’Eyal&lt;/a&gt;
, and &lt;a href=&quot;https://crawl.develz.org/&quot; target=&quot;_blank&quot;&gt;DCSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;is-making-a-roguelike-difficult-in-2019&quot;&gt;Is making a Roguelike difficult in 2019?&lt;/h2&gt;

&lt;p&gt;Designing a Roguelike now has never been easier thanks to the use of widely available libraries. If you have ever taken a look at the &lt;a href=&quot;https://github.com/NetHack/NetHack&quot; target=&quot;_blank&quot;&gt;NetHack source code &lt;/a&gt; you would understand what a daunting task it use to be to write your own Roguelike. Fortunately enough, you can write your own Roguelike in nearly any language, including JavaScript.&lt;/p&gt;

&lt;p&gt;JavaScript is actually quite a flexible language, relatively easy to pick up (although it does have some &lt;a href=&quot;https://whydoesitsuck.com/why-does-javascript-suck/&quot; target=&quot;_blank&quot;&gt;pitfalls&lt;/a&gt;
). JavaScript more importantly is cross-platform, meaning you do not have to trouble yourself with compiling code across different operating systems (unlike NetHack, which manually has to be compiled on each operating system and ported over).&lt;/p&gt;

&lt;p&gt;For this series, we will be using &lt;a href=&quot;https://ondras.github.io/rot.js/hp/&quot; target=&quot;_blank&quot;&gt;rot.js&lt;/a&gt;. Unfortunately the tutorial available at this time for rot.js is somewhat outdated, considering the &lt;a href=&quot;http://www.codingcookies.com/2013/11/25/building-a-roguelike-in-javascript-part-16/&quot; target=&quot;_blank&quot;&gt;last blog post&lt;/a&gt; was in 2013…&lt;/p&gt;

&lt;p&gt;Therefore, I’ve decided to write my own Roguelike tutorial utilizing more modern features JavaScript has to offer. For this series we will be heavily utilizing the new features &lt;a href=&quot;http://es6-features.org&quot; target=&quot;_blank&quot;&gt;ES6&lt;/a&gt; has to offer. Such features include: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot; target=&quot;_blank&quot;&gt;Classes&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; target=&quot;_blank&quot;&gt;Arrow Functions&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot; target=&quot;_blank&quot;&gt;imports and modules &lt;/a&gt;, and using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let&quot; target=&quot;_blank&quot;&gt;scoped-based variables&lt;/a&gt;, and much more. Don’t worry about reading through all that dense material, for now, let’s worry about making your life easier by setting up your development environment.&lt;/p&gt;

&lt;h2 id=&quot;development-tools-to-make-your-life-easier&quot;&gt;Development Tools to make your life easier&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blog/roguelikedev/its-dangerous-to-go-alone-take-this.jpg&quot; alt=&quot;It's dangerous to only use notepad&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Programming can be difficult sometimes without the right tools. While you can write all your code in vim (what I initially did), using other development tools will help us enhance our workflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: Just because I’ve used these tools, doesn’t necessarily mean you can’t use some other set of tools. For example, if you decide to use notepad++, atom, sublime, etc you can still follow along. Use what development environment your most comfortable with.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/download&quot; target=&quot;_blank&quot;&gt;Visual Studio Code&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;extensions: &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&quot; target=&quot;_blank&quot;&gt;Prettier&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot; target=&quot;_blank&quot;&gt;Live Server&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot;&gt;git&lt;/a&gt; (optional - if you want to follow a long with the code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you already have VSCode and git installed on your system you can skip the following below to the last section, &lt;a href=&quot;#how-to-follow-this-series&quot;&gt; How to follow this tutorial series&lt;/a&gt;, if you are however new to progrmaming or do not have neither VSCode nor git than you may proceed reading.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;setting-up-your-development-environment-and-getting-started&quot;&gt;Setting up your development environment and getting started&lt;/h3&gt;

&lt;h4 id=&quot;step-1-installing-vscode&quot;&gt;Step 1. Installing VSCode&lt;/h4&gt;

&lt;p&gt;Installing &lt;a href=&quot;https://code.visualstudio.com/docs/setup/setup-overview&quot; target=&quot;_blank&quot;&gt;Visual Studio Code&lt;/a&gt; is fairly straight forward.&lt;/p&gt;

&lt;p&gt;The reason we are using Visual Studio Code (VSCode for short…) over other editors such as Atom or Sublime is because of its simplicity, its power, and most importantly… its efficiency. In my experience Atom has been a very intensive resource hog on lower end machines, usually resulting in substantial slow down. Sublime on the other hand, lacks the flexibility Atom and VSCode has due to its limited options when it comes to extensions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: You can follow this series using Atom or any other editor you desire (&lt;a href=&quot;https://www.vim.org/&quot; target=&quot;_blank&quot;&gt;vim&lt;/a&gt; ftw) however you would need to find a way to serve the index.html page we’ll be making, similar to how we do it in Live Server (VSCode Extension). This could be achieved by setting up an Apache server and serving up the index.html as the main page or using a web hosting solution. The reason we need Live Server extension (or regular server) is because we’ll get a CORS error when trying to import the library locally.&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;windows&quot;&gt;Windows&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;Download VSCode Installer from &lt;a href=&quot;https://code.visualstudio.com/docs?dv=win&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Run installer (default installation is %AppData%\Local\Programs\Microsoft VS Code)&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;macos&quot;&gt;MacOS&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;Download VSCode Installer from &lt;a href=&quot;https://code.visualstudio.com/docs?dv=osx&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Double click on archive to extract.&lt;/li&gt;
  &lt;li&gt;Drag “Visual Studio Code.app” into your Applications folder.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;linux-ubuntu-linux-mint-debian-etc&quot;&gt;Linux (Ubuntu, Linux Mint, Debian, etc)&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;Install snap by running the following command in your terminal: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install snapd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install VSCode by running &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo snap install --classic code&lt;/code&gt; in your terminal.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;arch-linux&quot;&gt;Arch Linux&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;Install yay (or any other AUR helper). By running the following in your terminal:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo pacman -S git
git clone https://aur.archlinux.org/yay.git
cd yay
makepkg -si
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install visual-studio-code-bin from the AUR by running the following command in your terminal: &lt;code class=&quot;highlighter-rouge&quot;&gt;yay -S visual-studio-code-bin&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;setting-up-visual-studio-code&quot;&gt;Setting Up Visual Studio Code&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Navigate to the Extensions menu by either going to View-&amp;gt;Extensions or by pressing &lt;strong&gt;Ctrl+Shift+X&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Search for Live Server and install.&lt;/li&gt;
  &lt;li&gt;Profit.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;installing-git&quot;&gt;Installing git&lt;/h4&gt;

&lt;p&gt;Git will be how we manage our code. Git is a distributed version control system. This tutorial series is broken down into parts, each part has its own separate ‘branch.’ We can use git to track what branch of code we are working on.&lt;/p&gt;

&lt;p&gt;By default most Linux and MacOS systems should have git installed by default. If however you don’t you can do the following…&lt;/p&gt;

&lt;h5 id=&quot;windows-1&quot;&gt;Windows&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;Download &lt;a href=&quot;https://gitforwindows.org/&quot; target=&quot;_blank&quot;&gt;Git for Windows&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Install (I recommend using Git Bash)&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;macos-1&quot;&gt;MacOS&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;Install XCode/XCode Command Line Tools or download &lt;a href=&quot;https://sourceforge.net/projects/git-osx-installer/files/&quot;&gt;Git for Mac&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Follow installer prompts.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;linux-ubuntu-linux-mint-debian-etc-1&quot;&gt;Linux (Ubuntu, Linux Mint, Debian, etc)&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;Run the following command in your terminal: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install git&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;arch-linux-1&quot;&gt;Arch Linux&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;Run the following command in your terminal: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo pacman -S git&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;checking-if-git-is-installed&quot;&gt;Checking if git is installed&lt;/h5&gt;

&lt;p&gt;After you install git, make sure its running by running the following command either in your terminal or command prompt: &lt;code class=&quot;highlighter-rouge&quot;&gt;git --version&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If git is properly installed you can proceed.&lt;/p&gt;

&lt;h3 id=&quot;how-to-follow-this-series&quot;&gt;How to follow this tutorial series&lt;/h3&gt;

&lt;p&gt;The easiest way to follow this series is by cloning the github repository for this series, and following along by checking out each branch. Note: part 1 will start from scratch, however you still need the lib/ folder which is part of rot.js. So we’ll need to remove every other folder in the repo other than lib.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Alternatively you can download the repo as a zip file, and only extract the lib folder to where you want to work from.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can do this by running the following commands in our terminal:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/edgar-montano/jsroguelike
cd jsroguelike
rm -rf assets classes screenshots
rm LICENSE README.md index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only files that should be remaining are the &lt;code class=&quot;highlighter-rouge&quot;&gt;lib&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;After you finish this you can now proceed to actually &lt;a href=&quot;/building-a-roguelike-in-js-part1/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;&lt;em&gt;coding your first Roguelike in JavaScript!&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>edgarmontano</name></author><category term="javascript" /><category term="roguelike" /><category term="rot.js" /><category term="programming" /><category term="featured" /><summary type="html">What is a Roguelike?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/blog/roguelikedev/roguelikedev.png" /></entry><entry><title type="html">About Me</title><link href="http://localhost:4000/about-me/" rel="alternate" type="text/html" title="About Me" /><published>2019-01-01T00:00:00-05:00</published><updated>2019-01-01T00:00:00-05:00</updated><id>http://localhost:4000/about-me</id><content type="html" xml:base="http://localhost:4000/about-me/">&lt;p&gt;Audio Engineer, Software Engineer, and Linux Enthusiast.&lt;/p&gt;

&lt;p&gt;Programming has drastically changed my life. It cultivated the way I think, enhanced the way I approach problems, and gave meaning to my life. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most good programmers do programming not because they expect to get paid or get adulation by the public, but because it is fun to program.&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;Linus Torvald&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;how-i-got-here&quot;&gt;How I got here&lt;/h2&gt;

&lt;p&gt;I remember the sound the mechanical keys made when you typed on them; the tactile bump letting you know that you pressed an input. The churn and screech the modem will make when you were connecting to the internet, this is was of course back in the AOL-era of internet. I remember the lush sound of the startup sequence on Windows 98. This was my first computer I’ve personally had. I was eager to explore a world beyond my understanding. My passion for computers thrive the first moment I connected to the internet and was able to visit my favorite websites to play games (flashed base of course). It would take several minutes to load the browser, another several minutes to connect to the website, and finally a few more minutes to load up the game. Both my passion and patience was tested with this lengthy process, and my ardor for technology developed.&lt;/p&gt;

&lt;p&gt;The more I explored technology, the more I had a desire to learn. I soon yearned to develop my own programs, similar games to those of which I had played. (Nethack in particular). I began researching ‘best programming language.’ This was during a time prior to our massive resources, websites, videos… my research resulted in C/C++.&lt;/p&gt;

&lt;p&gt;My first language therefore was C++ when I was around 12 years old. Learning a language was both exciting and frustrating, mainly the later. I soon became eager to expand my knowledge of programming, beyond depths I was able to comprehend. I wanted to write elegant code, artistic annotations of comments on each of my functions; Likewise I wanted my function signatures to look cryptic but convey meaning, just like all modern art, you have to stare compulsively to fully embrace its meaning. I soon researched ‘best set of programming tools.’ This key phrase yielded one answer unanimously… Linux.&lt;/p&gt;

&lt;p&gt;Unfortunately I was not as well informed about Linux, and it’s various distrobutions. I scoured the internet to find a place to ‘buy a copy’ of Linux, unaware that Linux is a completely free and Open Source Operating System. I came across SuSe Linux Enterprise Edition. As a child I had no primary source of income, however eager to advance my programming to the next level I laboriously worked to save enough money to buy myself a copy of SuSe Linux. I remember the various odd jobs around the house and neighborhood I engaged in, in order to pay for SuSe… and after SuSe arrived in the mail, I felt as if my endeavours finally paid off.&lt;/p&gt;

&lt;p&gt;Along with my copy of SuSe, I got a general use manual. This manual became my bible. I religiously read this manual, front to back. I remember bringing it with me no matter where we go, on one such occasion I even brought it with me to a water park. Of course I left the manual in the car so it doesn’t get drenched and therefore no longer viable as a source of knowledge.&lt;/p&gt;

&lt;p&gt;Ironically the manual was rather straight forward. It demonstrated the basic UI, and basic applications. It didn’t go into detail about how to navigate the terminal, or use special tools. Despite this, I still maintained it as a sacred item. This book represented my aspiration into a new world. A world of Linux.&lt;/p&gt;

&lt;p&gt;Of course, dual booting SuSe wasn’t entirely straight forward, however once I finally got it loaded up I noticed ond fundamentally flaw, this flaw was a recurring flaw between Linux distrobutions at the time (and occasionally still is) … wireless drivers.&lt;/p&gt;

&lt;p&gt;I was able to setup my SuSe Linux machine, but did not have the proper wireless drivers. I scoured the internet for a solution, and nearly every source yielded one result: connect to ethernet to update drivers. This was not an option for me, so my SuSe Linux machine was rendered useless.&lt;/p&gt;

&lt;p&gt;At this time I joined a forum, it’s community brimming with hackers, programmers, and linux enthusiasts. It was here I finally discovered Linux was Open Source and therefore free. I was recommended to try to install Debian in place of my SuSe Linux. I heistated to do so, contemplating a long time on whether or not I should. Finally I caved in for my desire to get started using Linux. Debian’s installation process was a bit more involved compared to SuSe Linux. After a lengthly process I finally had Debian running. Unfortunately, I encountered the same issue… I needed to install wireless drivers that were not made available.&lt;/p&gt;

&lt;p&gt;At this time Ubuntu surged as a new contestant in the ring. It was a relatively new distrobution, however the most important part here, Ubuntu provided the drivers I needed. Eagerly I downloaded Ubuntu, and began the install process. It was by far the easiest and most user-friendly Linux distro I’ve had used at that point.&lt;/p&gt;

&lt;p&gt;I’ve never been more excited in my life to see a wireless icon in the right hand corner of my screen to appear. This moment drove me to the ardor for computers I have today. It inspired me to expand my knowledge of technology, but more importantly, it gave me the willpower to keep going forth. To never give up despite all adversity.&lt;/p&gt;

&lt;p&gt;My ardor for Linux and the customization it offered me, allowed me to develop an environment that felt like my own. No longer was I tied to the shackles and limits of my Operating System. I could perceivably do whatever I desired, my computer became an extension of myself in a way, representing all the ideologies I stood for, such as keeping things simple and efficient. This moment will eventually lead to designing my own child friendly Linux distrobution meant to help teach children how to use computers. It would lead to my passion for programming, and would eventually give meaning to my life… I woke up each morning with great joy to sit down at my desk, and code.&lt;/p&gt;

&lt;p&gt;Till this day, I still use Linux as my main Operating System when it comes to programming and generally being productive. I currently have Linux Mint (an Ubuntu derivative) installed on my main PC, and Arch Linux installed on my MacBook air.&lt;/p&gt;

&lt;h2 id=&quot;-whoami&quot;&gt;$ whoami&lt;/h2&gt;

&lt;p&gt;I am a NYU graduate with a degree in Computer Science. I’ve been programming since 12, and still continue to do so till this day. I am a former Fullstack Engineer at &lt;a href=&quot;http://rustytub.com/&quot;&gt;RustyTub IT Solutions Inc&lt;/a&gt;, I’ve also worked at several other companies as a Freelance, Consultant, and Senior Software Engineer, &lt;em&gt;in addition to starting my own Record Label in which I am the Chief Audio Engineer at&lt;/em&gt;… But more importantly, I am an entrepreneur.&lt;/p&gt;

&lt;p&gt;I am also a strong supporter of the Open Source community. While most of my code I produce is commericialized, I do try to contribute back to the community. All my Open Source code is hosted on my &lt;a href=&quot;https://github.com/edgar-montano/&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You’ll find most successful software engineers are entrepreneurs. This is somewhat natural, since our ardor for our field gives us the passion and energy to succeed. This is why I have started this website, to help cultivate my passion for what I do into one single resource so anyone can easily access. To further that, I have decided to make this project Open Source. All corresponding source code for each post will also be made available free to download.  I encourage users to fork my posts to their own blog (&lt;em&gt;however I do ask that my name is maintained as the author of the article&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;I’ve always wanted to make a difference in the world, contribute back to society in a meaningful way, hopefully this blog achieves exactly that.&lt;/p&gt;</content><author><name>edgarmontano</name></author><category term="sticky" /><summary type="html">Audio Engineer, Software Engineer, and Linux Enthusiast.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/iheartcoding.jpg" /></entry></feed>